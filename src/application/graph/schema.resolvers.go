package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"ddd_sample/src/application/graph/model"

	"github.com/google/uuid"
)

// CreateRanking is the resolver for the createRanking field.
func (r *mutationResolver) CreateRanking(ctx context.Context, input model.NewRanking) (*model.Ranking, error) {
	id, _ := uuid.NewUUID()
	ranking := &model.Ranking{
		ID:   id.String(),
		Name: input.Name,
	}
	r.rankings = append(r.rankings, ranking)
	return ranking, nil
}

// AddItem is the resolver for the addItem field.
func (r *mutationResolver) AddItem(ctx context.Context, input model.AddItem) (*model.Ranking, error) {
	id, _ := uuid.NewUUID()
	item := &model.Item{
		ID:        id.String(),
		RankingID: input.RankingID,
		Name:      input.Name,
	}
	r.items = append(r.items, item)
	return search(r.rankings, input.RankingID), nil
}

// Rankings is the resolver for the rankings field.
func (r *queryResolver) Rankings(ctx context.Context) ([]*model.Ranking, error) {
	return r.rankings, nil
}

// Items is the resolver for the items field.
func (r *rankingResolver) Items(ctx context.Context, obj *model.Ranking) ([]*model.Item, error) {
	var items []*model.Item
	for _, item := range r.items {
		if item.RankingID == obj.ID {
			items = append(items, item)
		}
	}
	return items, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Ranking returns RankingResolver implementation.
func (r *Resolver) Ranking() RankingResolver { return &rankingResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type rankingResolver struct{ *Resolver }

func search(rankings []*model.Ranking, uuid string) *model.Ranking {
	for _, r := range rankings {
		if r.ID == uuid {
			return r
		}
	}
	return nil
}
